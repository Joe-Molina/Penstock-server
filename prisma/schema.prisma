// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]
  Product   Product[]
  Order     Order[]
  Invocie   Invoice[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    Int?
}

model User {
  id       Int       @id @default(autoincrement())
  username String
  password String
  name     String
  lastname String
  email    String    @unique
  Order    Order[]
  Company  Company[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  Product   Product[]
  Company   Company?  @relation(fields: [companyId], references: [id])
  companyId Int?
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  price        Float
  photo        String
  description  String
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   Int
  Order_Detail Order_Detail[]
  Company      Company?       @relation(fields: [companyId], references: [id])
  companyId    Int?
}

model Order {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  revised      Boolean        @default(false)
  client       User           @relation(fields: [clientId], references: [id])
  clientId     Int
  Order_Detail Order_Detail[]
  Invoice      Invoice[]
  Company      Company?       @relation(fields: [companyId], references: [id])
  companyId    Int?
}

model Order_Detail {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orderId      Int
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  cant         Int
  actual_price Float
}

model Invoice {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  invoice_number Int
  order          Order    @relation(fields: [orderId], references: [id])
  orderId        Int
  Company        Company? @relation(fields: [companyId], references: [id])
  companyId      Int?
}
